#BANK MANAGEMENT USING TKINTER FOR GUI
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import sqlite3
import random
import os

DB_FILE = "bank.db"

# Map each UI element to your actual icon file path.
# If a value is "", it will try icons/<key>.png automatically.
ICON_FILES = {
    "bank": "icons/bank.png",
    "create": "icons/create.png",
    "login": "icons/login.png",
    "exit": "icons/exit.png",
    "deposit": "icons/deposit.png",
    "withdraw": "icons/withdraw.png",
    "statement": "icons/statement.png",
    "logout": "icons/logout.png",
    "back": "icons/back.png",
    "otp": "icons/otp.png",
    "user": "icons/user.png",
    "phone": "icons/phone.png",
    "password": "icons/password.png",
}

# ---------- Database setup ----------
conn = sqlite3.connect(DB_FILE)
conn.row_factory = sqlite3.Row
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS accounts (
    username TEXT PRIMARY KEY,
    password TEXT NOT NULL,
    phone TEXT NOT NULL,
    balance REAL NOT NULL DEFAULT 0
)
""")
conn.commit()


# ---------- Icons ----------
class IconManager:
    def __init__(self, root, mapping, default_dir="icons", default_ext=".png"):
        self._root = root
        self._imgs = {}
        self.default_dir = default_dir
        self.default_ext = default_ext
        self._load_all(mapping)

    def _resolve_path(self, key, path):
        if path and os.path.exists(path):
            return path
        fallback = os.path.join(self.default_dir, f"{key}{self.default_ext}")
        return fallback if os.path.exists(fallback) else None

    def _load_all(self, mapping):
        for key, path in mapping.items():
            resolved = self._resolve_path(key, path)
            if resolved:
                try:
                    self._imgs[key] = tk.PhotoImage(file=resolved)
                except Exception:
                    self._imgs[key] = None
            else:
                self._imgs[key] = None

    def get(self, key):
        return self._imgs.get(key)

    def set_window_icon(self, window, key):
        img = self.get(key)
        if img:
            try:
                window.iconphoto(True, img)
            except Exception:
                pass


class BankApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Sandeep Bank")
        self.root.geometry("360x560")
        self.root.configure(bg="#f7f8fb")
        self.root.resizable(False, False)

        # State
        self.current_account = None
        self.pending_user_data = {}
        self.generated_otp = None

        # Icons
        self.icons = IconManager(self.root, ICON_FILES)
        self.icons.set_window_icon(self.root, "bank")

        # Theme
        style = ttk.Style()
        try:
            style.theme_use("clam")
        except Exception:
            pass
        style.configure("TButton", font=("Segoe UI", 10), padding=6)
        style.configure("TLabel", font=("Segoe UI", 10), background="#f7f8fb")
        style.configure("Header.TLabel", font=("Segoe UI", 14, "bold"))
        style.configure("Title.TLabel", font=("Segoe UI", 12, "bold"))
        style.map("TButton", background=[("active", "#e6e6e6")])

        self.main_menu()
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    # ---------- Layout helpers ----------
    def clear_window(self):
        for w in self.root.winfo_children():
            w.destroy()

    def header(self, text="Sandeep Bank"):
        frame = tk.Frame(self.root, bg="#f7f8fb")
        frame.pack(pady=10)
        logo = self.icons.get("bank")
        if logo:
            tk.Label(frame, image=logo, bg="#f7f8fb").pack(side="left", padx=6)
        ttk.Label(frame, text=text, style="Header.TLabel").pack(side="left")
        return frame

    def labeled_entry(self, parent, label, show=None, placeholder="", icon_name=None):
        row = tk.Frame(parent, bg="#f7f8fb")
        row.pack(fill="x", pady=6)
        if icon_name and self.icons.get(icon_name):
            tk.Label(row, image=self.icons.get(icon_name), bg="#f7f8fb").pack(side="left", padx=(0, 6))
        ttk.Label(row, text=label).pack(anchor="w")
        entry = ttk.Entry(row, show=show)
        entry.pack(fill="x")
        if placeholder:
            self.add_placeholder(entry, placeholder, show=show)
        return entry

    def add_placeholder(self, entry, placeholder, show=None):
        def on_focus_in(_):
            if entry.get() == placeholder:
                entry.delete(0, "end")
                if show:
                    entry.config(show=show)

        def on_focus_out(_):
            if not entry.get():
                if show:
                    entry.config(show="")
                entry.insert(0, placeholder)

        entry.insert(0, placeholder)
        entry.bind("<FocusIn>", on_focus_in)
        entry.bind("<FocusOut>", on_focus_out)

    def image_button(self, parent, text, cmd, icon_name=None):
        icon = self.icons.get(icon_name) if icon_name else None
        if icon:
            b = tk.Button(
                parent, text=text, image=icon, compound="left",
                command=cmd, font=("Segoe UI", 10), padx=8, pady=6,
                bd=0, bg="#ffffff", activebackground="#f1f1f1", relief="flat"
            )
            b.pack(fill="x", pady=6)
            return b
        else:
            btn = ttk.Button(parent, text=text, command=cmd)
            btn.pack(fill="x", pady=6)
            return btn

    # ---------- Screens ----------
    def main_menu(self):
        self.clear_window()
        self.header("Welcome to Sandeep Bank")

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        self.image_button(container, "Create account", self.create_account_screen, "create")
        self.image_button(container, "Login", self.login_screen, "login")
        self.image_button(container, "Exit", self.on_close, "exit")

        tk.Label(self.root, text="Secure • Simple • Reliable", bg="#f7f8fb", fg="#666").pack(pady=8)

    def create_account_screen(self):
        self.clear_window()
        self.header("Create account")

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        username_entry = self.labeled_entry(container, "Username", placeholder="Enter a unique username", icon_name="user")
        password_entry = self.labeled_entry(container, "Password", show="*", placeholder="Enter a strong password", icon_name="password")
        phone_entry = self.labeled_entry(container, "Phone number", placeholder="10-digit mobile number", icon_name="phone")

        def send_otp():
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            phone = phone_entry.get().strip()

            if not username or username == "Enter a unique username":
                messagebox.showerror("Error", "Username is required.")
                return
            if not password or password == "Enter a strong password":
                messagebox.showerror("Error", "Password is required.")
                return
            if not phone.isdigit() or len(phone) != 10:
                messagebox.showerror("Error", "Enter a valid 10-digit phone number.")
                return

            cursor.execute("SELECT 1 FROM accounts WHERE username = ?", (username,))
            if cursor.fetchone():
                messagebox.showerror("Error", "Username already exists. Choose another.")
                return

            self.generated_otp = f"{random.randint(100000, 999999)}"  # 6-digit OTP
            self.pending_user_data = {"username": username, "password": password, "phone": phone}

            messagebox.showinfo("OTP sent", f"An OTP has been sent to {phone} (simulated): {self.generated_otp}")
            self.root.after(250, self.otp_verification_screen)

        self.image_button(container, "Send OTP", send_otp, "otp")
        self.image_button(container, "Back", self.main_menu, "back")

    def otp_verification_screen(self):
        self.clear_window()
        self.header("Verify OTP")

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        otp_entry = self.labeled_entry(container, "Enter OTP", placeholder="6-digit code", icon_name="otp")

        def verify():
            entered = otp_entry.get().strip()
            if entered == self.generated_otp:
                data = self.pending_user_data
                try:
                    cursor.execute(
                        "INSERT INTO accounts (username, password, phone, balance) VALUES (?, ?, ?, ?)",
                        (data["username"], data["password"], data["phone"], 0.0)
                    )
                    conn.commit()
                except sqlite3.IntegrityError:
                    messagebox.showerror("Error", "Username already exists. Please try another.")
                    return
                messagebox.showinfo("Success", f"Account created for {data['username']}")
                self.pending_user_data.clear()
                self.generated_otp = None
                self.root.after(200, self.main_menu)
            else:
                messagebox.showerror("Error", "Incorrect OTP. Please try again.")

        self.image_button(container, "Verify", verify, "otp")
        self.image_button(container, "Back", self.create_account_screen, "back")

    def login_screen(self):
        self.clear_window()
        self.header("Login")

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        username_entry = self.labeled_entry(container, "Username", placeholder="Your username", icon_name="user")
        password_entry = self.labeled_entry(container, "Password", show="*", placeholder="Your password", icon_name="password")

        def login():
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            cursor.execute("SELECT * FROM accounts WHERE username = ? AND password = ?", (username, password))
            row = cursor.fetchone()
            if row:
                self.current_account = dict(row)
                self.root.after(200, self.account_menu)
            else:
                messagebox.showerror("Error", "Invalid username or password.")

        self.image_button(container, "Login", login, "login")
        self.image_button(container, "Back", self.main_menu, "back")

    def account_menu(self):
        if not self.current_account:
            self.main_menu()
            return

        self.clear_window()
        self.header(f"Hello, {self.current_account['username']}")

        summary = tk.Frame(self.root, bg="#eef4ff", bd=0, highlightbackground="#d0dcff", highlightthickness=1)
        summary.pack(fill="x", padx=18, pady=(4, 10))
        tk.Label(summary, text=f"Phone: {self.current_account['phone']}", bg="#eef4ff", fg="#334").pack(anchor="w", padx=10, pady=4)
        tk.Label(summary, text=f"Balance: ₹{float(self.current_account['balance']):.2f}", bg="#eef4ff", fg="#334",
                 font=("Segoe UI", 11, "bold")).pack(anchor="w", padx=10, pady=(0, 8))

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        self.image_button(container, "Deposit", self.deposit_screen, "deposit")
        self.image_button(container, "Withdraw", self.withdraw_screen, "withdraw")
        self.image_button(container, "Mini statement", self.show_statement, "statement")
        self.image_button(container, "Logout", self.logout, "logout")

    def deposit_screen(self):
        self.clear_window()
        self.header("Deposit money")

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        amount_entry = self.labeled_entry(container, "Amount (₹)", placeholder="Enter amount, e.g., 500.00")

        def deposit():
            try:
                amount = float(amount_entry.get().strip())
                if amount <= 0:
                    raise ValueError
                new_balance = float(self.current_account["balance"]) + amount
                cursor.execute("UPDATE accounts SET balance = ? WHERE username = ?", (new_balance, self.current_account["username"]))
                conn.commit()
                self.current_account["balance"] = new_balance
                messagebox.showinfo("Deposit", f"Deposited ₹{amount:.2f}. New balance: ₹{new_balance:.2f}")
                self.root.after(200, self.account_menu)
            except ValueError:
                messagebox.showerror("Error", "Enter a valid positive amount.")

        self.image_button(container, "Deposit", deposit, "deposit")
        self.image_button(container, "Back", self.account_menu, "back")

    def withdraw_screen(self):
        self.clear_window()
        self.header("Withdraw money")

        container = tk.Frame(self.root, bg="#f7f8fb")
        container.pack(fill="both", expand=True, padx=18, pady=10)

        amount_entry = self.labeled_entry(container, "Amount (₹)", placeholder="Enter amount, e.g., 500.00")

        def withdraw():
            try:
                amount = float(amount_entry.get().strip())
                if amount <= 0:
                    raise ValueError
                if amount <= float(self.current_account["balance"]):
                    new_balance = float(self.current_account["balance"]) - amount
                    cursor.execute("UPDATE accounts SET balance = ? WHERE username = ?", (new_balance, self.current_account["username"]))
                    conn.commit()
                    self.current_account["balance"] = new_balance
                    messagebox.showinfo("Withdraw", f"Withdrawn ₹{amount:.2f}. New balance: ₹{new_balance:.2f}")
                else:
                    messagebox.showerror("Error", f"Insufficient funds. Current balance: ₹{float(self.current_account['balance']):.2f}")
                self.root.after(200, self.account_menu)
            except ValueError:
                messagebox.showerror("Error", "Enter a valid positive amount.")

        self.image_button(container, "Withdraw", withdraw, "withdraw")
        self.image_button(container, "Back", self.account_menu, "back")

    def show_statement(self):
        if not self.current_account:
            self.main_menu()
            return
        statement = (
            f"👤 Username: {self.current_account['username']}\n"
            f"📱 Phone: {self.current_account['phone']}\n"
            f"💰 Balance: ₹{float(self.current_account['balance']):.2f}"
        )
        messagebox.showinfo("Mini statement", statement)

    def logout(self):
        self.current_account = None
        messagebox.showinfo("Logout", "You have been logged out.")
        self.root.after(150, self.main_menu)

    def on_close(self):
        try:
            conn.commit()
            conn.close()
        except Exception:
            pass
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = BankApp(root)
    root.mainloop()
